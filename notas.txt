SEO con React y Deploy integrado con GitHub

Problema:
  -Tenemos un problema, cuando entramos al detalle de un gif, podemos verlo
    sin problema, pero, sí estamos en ese detalle, y recargamos la página,
    hay un error.
  -Esto se debe a que en algún momento, en el contexto, estamos guardando
    ese gif en especifico, pero, como no estamos pasando por donde
    solicitamos todos los gifs, no lo va a encontrar.
  -Tambien recordar, que no estamos pidiendo ningún gif en especifico a
    la API desde los detalles, sino, se lo pedimos al context.

Solución:
  -Como solución, estamos creando una utilidad que solicite directamente
    a la API el gif basandonos en su ID.
  -Esta la usamos en un hook, aquí usamos el hook donde traemos todos
    los gifs, de esto hacemos un fin basandonos en su ID.
  -Sí encontro ese gif, lo devolvemos, de lo contrario, usamos la 
    utilidad de petición de un gif.

Redirect con wouter:
  -Todos los routers tienen que tener un componente <redirect/>.
  -Este lo que hará es retornarnos a la ruta que indique su prop 'to'.
  -Lo que hacemos es que en lugar de retornar un JSX normal, solo 
    retornamos este componente, y al ingresar al compontente donde
    estemos retornando el redirect, nos redirige a la ruta indicada.

404:
  -Al no encontrar un gif, para crear un 404 con wouter, lo que hacemos
    es crear la ruta /404, y redirigir hacia alla cuando hay un error.
  -En el frontend, no creamos como tal un 404, ya que no indicamos al
    navegador este error, eso lo hacemos desde el backend.
  -Sin embargo, sí le damos la muestra al cliente de que algo malo 
    ocurrió.

Hook para el SEO:
  -Vamos primero a realizar un hook para el SEO, para mostrar como
    funcionan desde el inicio.
  -Para ello, en un hook, simplemente recibimos el titulo, y para colocarlo
    en la pestaña, usamos: document.title = 'Nuevo titulo'.
  -En cualquier página podemos ahora usar el hook, este por ahora no
    returna nada, solo coloca el title.
  -Esto tiene un problema, es que al usar el hook, ahora todas las
    páginas tendrán el mismo title.
  -Sí no necesitamos gran cosa, podríamos usar el hook useTitle que creamos, donde
    manejamos tanto el titulo como la descripción de cada página.

Librerías para SEO:
  -Sí necesitamos algo muy grande, usamos react-helmet.
  -Sí necesitamos algo pequeño de SEO, react-head, que es mucho más ligera.

React Helmet:
  -Importamos Helmet de forma nombrada.
  -Dentro del JSX al inicio, colocamos <Helmet></Helmet> y dentro todas las etiquetas
    que podrían ir en un Head de html.
  -Tambien, al usar loading o error, podríamos colocar un helmet.
  -Si queremos ver cuales etiquetas podríamos tener en un head: https://htmlhead.dev/

Definición de useRef:
  -Permite guardar un valor que se va a mantener entre renderizados y ejecuciones de
    un hook.
  -Sí en un componente tenemos una variable, esta variable se va a crear cada vez que
    se renderiza el componente.
  -Con useRef, evitamos que se cree en esos renderizados.

Integración con GitHub para continuos deployment:
  -Vamos al proyecto en Vercel.
  -Click en 'Deploy with our Git Integrations'
  -Agregamos el nombre del repositorio que tenemos en GitHub, damos save.
  -Puede que se haga de una vez, o haya que dar permisos.
  -En Gh, nos saltará un mensaje indicando que tenemos una nueva rama, damos en
    comparar y pull Request, colocamos el mensaje y creamos la PR.
  -Esto va a hacer un deploy, cuando termine, nos dejara en GH una url donde estará
    el nuevo link para nuestra página.
  -Hacemos merge. Con esto, en vercel ahorá se hara un deploy a nuestro repo de 
    vercel.
  -En necesario que como tenemos varios urls con el mismo sitio, definamos la 
    canonical, para que google entienda cual es el principal.
  -Para ello, colocamos la etiqueta en el head: <link rel=canonical href=https://sitio.com.
  -Esto lo hacemos en todas nuestras páginas de nuestra app.