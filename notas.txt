CSS in JSX y Styled Components con Emotion y React

Emotion:
  -Librería para agregar CSS en el JS.
  -Tiene dos formas:
    .CSS en JS: El más clasico.
    .Styled components: Basado en la librería de Styled-components.
  -Recomendado para proyectos pequeños o medianos. Para grandes es mejor tener archivos.
  -Permite que cargue solo el CSS que se necesita.
  -Instalación: npm i @emotion/core.

Usar emotion con css in jsx:1
  -Importamos su elemento css.
  -Declaramos una variable.
  -Le damos como valor el css con un tag template.
  -Dentro de este colocamos los estilos.
  -Esa variable la daremos como valor a la prop css del elemento donde aplicar esos estilos.
  -Ahora, hay que configurar algunas cosas del componente ya que estamos usando create-react-app y no podemos
    usar webpack y babel. Hay que decirle de donde va a sacar el jsx, y sí usamos React.fragment tambien.
  -Para ello importamos primero jsx de emotion.
  -Para ello, colocamos lo siguiente:
    .JSX: /* @jsx jsx **/
    .React.fragment: /* @jsxFrag React.Fragment jsx **/
  -Cuando colocamos emotion, los componentes salen con un hash en la clase, esto se hace para vitar la colisión
    entre classNames.
  
Tag template:
  -Un tag template, es un metodo que recibirá como parametro todos los elementos dentro del
    template string.
  -Para usarlo colocamos el nombre del metodo, inmediatamente seguido del template string, y no colocamos
    parentesis.
  -Por ejemplo ese metodo css: css`estilos`.

Otras notas de JSX in CSS:
  -Otra forma de hacerlo es en lugar de los template strings, pasamos los parentesis del metodo, y los estilos
    los pasamos dentro de un objeto.
  -De esta forma, los values iran como strings. Y las propiedades que tienen más de una palabra se colocan o
    en strings, o con CamelCase.
  -Para agregar pseudo-clases, colocamos así:
    ":hover" {
      estilos;
    }
  -Tenemos tambien los metodos que usamos en css, pero debemos colocarlos como strings.
  -Recordemos que como valores podríamos tambien agregar variables de js, porque todo lo estamos haciendo en
    JS.


Usar emotion con styles-components:
  -Debemos instalar: @emotion/styled.
  -La importamos completa.
  -Creamos una constante que tenga como valor un elemento de lo importado. Debe iniciar en mayuscula.
  -Ese elemento será el nombre de la etiqueta html que deseamos usar.
  -Este tendrá un tag template,y dentro llevará los estilos.
  -Ahora, en el JSX, en lugar de las etiquetas html, colocaremos esa constante.
  -Todo lo que se coloque dentro de los tags, serán hijos de la etiqueta que se está usando por lo que podemos
    usar pseudoclases.
  -El ejemplo de antes con el [disabled], se coloca solamente eso, seguido de los estilos.

pseudo clases:
  -Las colocamos igual que en el ejemplo anterior, pero sín ser strings.
  -Las variables las hacemos de la misma forma.

Agregar componentes ya existentes:
  -Como ejemplo tenemos el Link de wouter.
  -Para estilarlo, colocamos, en lugar del elemento html de syled, un parentesis, y dentro colocaríamos el
    Link.
  -styled(Link)`estilos`

Dos componentes con los mismos estilos pero siendo diferente tipo de componente:
  -Por ejemplo, tenemos los mismos estilos para Link y Button, aunque ambos usan el Link, la idea es que sí
    recibimos como prop href, usemos Link, sino, usemos Button.
  -Creamos una variable string con todos los estilos.
  -Hay dos formas de hacerlo:
    .Despues del parentesis donde colocaremos el Link, colocamos otro parentesis donde colocamos la variable.
    .Despues del parentesis colocamos unos template strings, y dentro colocamos la variable.

withComponent:
  -Esta sería otra forma de hacer lo anterior.
  -Nos funciona en nuestro caso porque tiene props distintas, entonces, sí como prop recibimos href, usaremos
    el Link, de lo contrario, usaremos el Button que vamos a explicar.
  -El button será: Link.withComponent('button').
  -Esto significa que use los estilos de Link, pero en un botton.

Validaciones mediante props:
  -Cuando a un componente de styled components le pasamos una prop en el JSX, podemos recuperarla en el
    styled.
  -Para eso, dentro de los template tag, podemos colocar una evaluación (${}), aquí colocar una función.
  -Esta función siempre como primer parametro será un objeto con las props.
  -En esta función, al final, retornaremos otro string con los estilos, pero estos los podemos calcular
    con distintas variables que vayamos haciendo dentro de la función.
  -En nuestro ejemplo, a un elemento de lista le pasamos el indice como prop, validamos sí el mod de de ese
    indice era par o impar, y según este, aplicamos un estilo u otro.