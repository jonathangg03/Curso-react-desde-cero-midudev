Creando Custom Hooks y usando context para conseguir estado global

wouter:
  -Estamos colocando en el app todas las rutas.
  -De esta forma, el App se convierte como en el enrutador.

useLocation:
  -Hook de wouter.
  -Lo colocamos en el cuerpo del componente, esto nos retorna un array de 2 
    posiciones:
      .La ruta en la que estamos.
      .Una función para navegar de forma programatica (sin usar el Link).

-Para proyectos de producción muy grandes, usaremos react-router-dom, sí son
  personales, podemos usar wouter.

Guardar ultima busqueda:
  -Podemos ver que sí hacemos una busqueda nos muestra los gifs de esa busqueda.
  -Si vamos a la home, nos mostrará la ultima busqueda.
  -Esto lo hacemos en el hook.
  -Cuando realizamos la busqueda, colocamos en localStorage la ultima keyword
    que buscamos.
  -Sí no obtenemos una keyword al usar el hook, debe hacer la busqueda con la que
    esté en el localStorage.

Nota para empezar con el contexto:
  -Vamos a usar el contexto para que al dar click en un gif, nos muestre solo ese
    gif y la información.
  -Esto lo podríamos hacer simplemente haciendo un llamado a la API para recuperar
    su info. que sería lo más optimo.
  -Pero, lo haremos con context solo para verlo como ejemplo.

Contexto:
  -Se podría entender como un objeto de React al que pueden acceder todos los
    componentes sin que se les pase ni por parametro, ni por props, ni por nada.
  -Usaremos un hook para acceder a el.
  -El gif al que le daremos click lo guardaremos en ese objeto.
  -Podemos tener más de un context.

Creación del contexto:
  -Lo creamos en context > StaticContext.js.
  -En una constante, almacenamos React.Context() y le pasamos un objeto por
    parametro.
  -Ese objeto tendrá los valores iniciales de ese contexto pero solo para los
    componentes que intenten consumir ese contexto sin tener acceso a el por no
    tener el provider.
  -Esto significa que sin provider aun así podremos acceder al contexto.
  -Sí no queremos ninguno, colocamos un objeto vacío.
  -Exportamos el contexto.

Proveer ese contexto:
  -El contexto tiene dos partes, el proveedor y el consumidor.
  -El proveedor será el elemento que provee a los componentes de ese contexto, y
    los componentes que lo utilicen son los consumidores.
  -Entonces, sí queremos proveer a toda la aplicación del contexto, debemos escoger
    algún elemento donde la aplicación este completa.
  -En nuestro caso la App, que es el router, y donde tenemos todas las rutas.
  -Entonces, importamos el contexto creado.
  -Como JSX, encapsularemos todos los componentes que estamos renderizando con el
    provider del Contexto: <Context.Provider><Componentes /> </>.
  -Ahorá, solamente lo que esté dentro del provider, tendrá acceso al contexto.
  -Debemos pasar una prop 'value', que tendrá el valor inicial del contexto para
    los elementos que sí tienen el provider. Será un objeto.
  -Como value no tiene que ser un objeto, generalmente lo usamos así, pero
    no es una regla.

Personalizar el provider:
  -Al crear un contexto, podemos hacer que este tenga un provider a la hora de
    declararlo, y al usarlo, no haya que pasarle el value.
  -Esto nos dá la ventaja de poder usar el estado dentro del contexto.
  -Para ello, exportaremos de forma nombrada una función, que tendrá las props
    como parametro. De ellas necesitamos children.
  -Aquí, retornaremos el context.provider de la misma manera, pero esto envolverá
    children.
  -En nuestro caso, como que eremos usar estado, usaremos useState, y ambos 
    elementos de este los pasaremos al value dentro de un objeto.
  -Ahora, esta función encapsulará como un provider, sin que haya que pasarle el
    value.
  -Finalmente, el export default que sería el contexto lo usaremos de la misma
    manera.
  -Lo que haremos ahora es que, como en el contexto ya tenemos un estado que será
    global, en el guardaremos los gifs, y ya no en el estado de un componente, 
    cambiamos el hook que habiamos creado para que use el contexto, y no su estado
    interno.

-El problema que hay en esto, es que al hacerlo, sí recargamos desde la página
  de los detalles, sin venir de la página en la que solicitamos los gifs, el
  contexto no va a tener nada en su estado.

-En este caso, sí una de las soluciones sería hacer la petición en caso de que 
  el estado este vacío.

-Pero aun así el context nos ahorro llamadas, puesto que ya tenia en su estado
  gifs, internamente los filtro por el que queríamos y listo, solo hizo una llamada.

-El custom hook useGlobalGifs lo que hace es traer el contexto, y es él quien le
  dará la info al componente Detail.
-Esto es un hook de solo lectura, que es un custom hook que solamente lee info, y
  la almacena, entonces al traer el hook nos trae la información. En este caso
  la traemos del contexto.