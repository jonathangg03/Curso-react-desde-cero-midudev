Cómo usar React.memo, mejorar el rendimiento y hacer deploy con Vercel de nuestra app de React

React Dev Tools:
  -Profiler: Podemos ver cuando se hizo un renderizado, porque, cuanto tardó cada uno, 
    pero no está este modo activado para apps en producción.
  -Components: Ya conocemos esa pestaña, pero, sí vamos a la rueda de ajustes tenemos la
    opción "Highligths update when components render" nos dibujará un cuadro al rededor de 
    los componentes cuando sean afectados por un render. Estos cuadros se ven y se quitan
    casí al momento.
      .En la opció Profiler, la primer casilla hace que se grabe el porque se renderiza
        cada componente. Lo vamos a activar.
  
Profiler:
  -Al irnos al profiler, y dar en el boton de grabar, sí escribimos en un input y termina
    la grabación, todo lo que esté de colores es lo que se ha renderizado.
  -Sí damos click a algúno, en la parte superior derecha vemos el porque se renderizó.
  -Las que están debajo a colores son los que se han renderizado por su causa.
  -El home se renderiza porque los hooks cambian. Esto es porque, al cambiar valor al
    input, cambia su estado, y hace que se vuelva a renderizar el componente.
  -Esto es una problema de performance.
  -Lo que aparece en gris es porque desde que se grabó el profiler no se volvió a 
    renderizar nada.

-Cuando un formulario lo tenemos en el componente, normalmente cambiará el estado de ese
  componente cada vez que tecleamos. La solución a esto es tener el formulario con su
  propio estado en un componente aparte. Esto pasa con todo, la mayoría de veces el 
  setState se recomienda en un componente aparte.

-Otro posible renderizado multiple que podemos tener es en SearchForm, que se lo hace 
  porque su componente padre se renderiza muchas veces, y cada vez que se renderiza, 
  vuelve a renderizar este componente. Hay 2 cosas que hay que hacer, el primero encerrar
  la función que está causandolo en un useCallback.

